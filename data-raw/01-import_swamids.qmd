---
title: "1 Import SWAM IDs"
author: "CA Pellett"
format: html
execute: 
  echo: false
date: last-modified
---

```{r}
library(magrittr)

```
As the SWAM models are developed and updated in each basin, in preparation for the River Basin Council Meetings, tables are prepared to facilitate review of the scenarios and compare SWAM inputs and outputs to other reference datasets.

Current Use Scenario water demands are included in the raw data, or at least available by downloading the most recent version of SWAM. 

What is currently needed, and included, is the relationship between SWAM objects and source water intakes in the water withdrawal database. This information is documented in a table of "joins". In earlier model versions, the join table related SWAM water user objects to withdrawal permit IDs. This is not sufficient in cases where not all intakes permitted under a given permit ID are included in the SWAM water user object. More recently, the format has been updated to join the SWAM objects to sourceids. 


```{r}
sourceids <- scwaterwithdrawal::intakes |>
  sf::st_drop_geometry() |>
  # scwaterwithdrawal::parse_sourceid() |>
  dplyr::select(sourceid, userid)
```

# Broad Basin Model
```{r}
### The right way to do this is to join a SWAM ID to a set of intakes,
### (or discharges, potentially). 
## swamids table with 3 columns: basin_swam, swamid, sourceid
swamids_brd <- readxl::read_xlsx('BroadCUandDemandSummary2021.xlsx',
                             sheet='SWAM Join') |>
  dplyr::mutate(swam_model='Broad') |>
  dplyr::left_join(sourceids) |>
  dplyr::select(-userid) |>
  dplyr::rename(swamid=swamID)
```
This table joins the userids (withdrawal permits) to the swamIDs. It should join to intakes. For now, simply assume that all intakes associated with a withdrawal permit are also associated with the swam object.

# Pee Dee Basin Model
```{r}
## I set this table up with a single sourceid for each swamID.
## It should be all sourceids (and/or npdes ids) for each swamID
swamids_pd0 <- read.csv('PeeDee.txt') |>
  dplyr::mutate(sourceid = stringr::str_trim(sourceid)) |>
  dplyr::mutate(swam_model='PeeDee') |>
  dplyr::left_join(
    sf::st_drop_geometry(scwaterdemand::intakes) |>
      dplyr::select(sourceid, wnetid),
    by='sourceid') |>
  dplyr::select(swamid, sourceid, comments, swam_model, wnetid)
  

swamids_pd1 <- swamids_pd0 |>
  dplyr::select(swamid, wnetid) |>
  dplyr::left_join(
    sf::st_drop_geometry(scwaterdemand::intakes) |>
      dplyr::select(sourceid, wnetid, portion), 'wnetid') |>
  dplyr::select(swamid, sourceid) |>
  dplyr::anti_join(swamids_pd0, c('swamid', 'sourceid')) |>
  dplyr::mutate(swam_model='PeeDee', comments='assumed according to permit joins') |>
  dplyr::bind_rows(swamids_pd0)
## that includes a lot of groundwater (wells) which maybe shouldn't be included...

```
This one includes sourceids, but it isn't correct. When I set it up, I included only a single sourceid for each swamID. It should include all sourceids (and/or npdes ids) for each swamID. To correct for that, I'm going to join all intakes from a given withdrawal system, as defined in the scwaterdemand package, to each associated swamID. 


# Saluda Basin Model
```{r}
swamids_sld0 <- readxl::read_xlsx(
  'Baseline Saluda Demands (for Alex P).xlsx',
  sheet='swamid_joins')

swamids_sld1 <- swamids_sld0 |>
  tidyr::pivot_longer(usersourceid1:usersourceid5) |>
  dplyr::filter(!is.na(value)) |>
  dplyr::mutate(swam_model='Saluda') |>
  dplyr::rename(swamid = swamID, sourceid=value) |>
  dplyr::select(swamid, sourceid, swam_model)

swamids_sld1b <- swamids_sld1 |>
  dplyr::filter(!scwaterwithdrawal::sourceid_val(sourceid)) |>
## two rows, both are userids
  dplyr::rename(userid=sourceid) |>
  dplyr::left_join(sourceids, 'userid') |>
  dplyr::select(-userid)

swamids_sld2 <- swamids_sld1 |>
  dplyr::anti_join(swamids_sld1b, 'swamid') |>
  dplyr::bind_rows(swamids_sld1b)


```

For some swamids, this table joins the userids (withdrawal permits). It should join to intakes. For now, simply assume that all intakes associated with a withdrawal permit are also associated with the swam object.

# Savannah Basin Model
```{r}
## Join table from intakes to swam objects.
## Does not include ag placeholders (HUC10s)
## Does not include discharge only objects.

swamids_sav0 <- readxl::read_excel("Baseline Savannah Demands (for Alex).xlsx", 
    sheet = "Join", skip = 3) |>
  dplyr::select(1:5) |>
  tidyr::pivot_longer(cols = !User, values_drop_na = TRUE) |>
  dplyr::select(swamid = User, sourceid = value)  |>
  dplyr::mutate(swam_model = 'Savannah')

swamids_sav1 <- swamids_sav0 |>
  dplyr::filter(scwaterwithdrawal::sourceid_val(sourceid))
## this wont work with new sourceid format
## todo: filter out empties

swamids_sav0 |>
  dplyr::filter(!scwaterwithdrawal::sourceid_val(sourceid))
## 1 rows, IN: Clariant . There are two IN withdrawal permits named Clariant, 
## both in Chester county, and neither reporting withdrawals after 2002...

```

# Salkehatchie Basin Model
```{r}
swamids_slk0 <- readxl::read_excel(
  "SLK Baseline (Current Use) Demands.xlsx", skip = 3) |>
  head(19) ## the 20th line is a comment.

swamids_slk_attr <- swamids_slk0 |>
  head(7) |>
  tidyr::pivot_longer(cols=2:ncol(swamids_slk0),
                      names_to = 'swamid') |>
  tidyr::pivot_wider(names_from=`Name:`)

names(swamids_slk_attr) <- c('swamid', 'river_mile', 'reg_limit', 'stream', 
                             'sourceid1', 'sourceid2', 'sourceid3', 'sourceid4')

swamids_slk1 <- swamids_slk_attr |>
  dplyr::select(swamid, sourceid1:sourceid4) |>
  tidyr::pivot_longer(sourceid1:sourceid4) |>
  dplyr::select(swamid, sourceid=value) |>
  dplyr::filter(!is.na(sourceid)) |>
  unique()

dplyr::filter(swamids_slk1, !scwaterwithdrawal::sourceid_val(sourceid))
## there is an invalid sourceid.

## fix it.
swamids_slk2 <- swamids_slk1 |>
  dplyr::mutate(sourceid=dplyr::if_else(
    swamid=='IR: Breland', '05IR002S01', sourceid)) |>
  dplyr::mutate(swam_model = 'Salkehatchie')

```

```{r}
dplyr::filter(swamids_slk2,
              stringr::str_detect(stringr::str_sub(swamid, -1), '[:digit:]' ))
## there are several repeat entries, swamid's repeated with a number at the end.
## if i understand correctly, those are representative of swam outputs, where the demand would be divided.
## the swam inputs would be the sum of those columns.

## to fix, remove trailing numeric digit and then filter for unique rows.
swamids_slk3 <- swamids_slk2 |>
  dplyr::mutate(swamid = dplyr::if_else(
    stringr::str_detect(stringr::str_sub(swamid, -1), '[:digit:]' ),
    stringr::str_sub(swamid, 1, -2), swamid)) |>
  unique()

## that should be a robust fix 
```

# Santee Basin Model

```{r}
swamids_snt <- {}

```


# Combine and Export
```{r}
swamids <- dplyr::bind_rows(swamids_brd, swamids_pd1, swamids_sav1, swamids_sld2, swamids_slk3, swamids_snt) |>
  dplyr::select(swamid, sourceid, swam_model, comments)

```

```{r}
usethis::use_data(swamids, overwrite=T)

```